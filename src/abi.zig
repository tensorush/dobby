const std = @import("std");
const builtin = @import("builtin");

pub const PC: Register = switch (builtin.cpu.arch) {
    .x86_64 => .rip,
    .aarch64 => .pc,
    else => unreachable,
};

pub const TRAP_INST: trap_inst_width_t = switch (builtin.cpu.arch) {
    .x86_64 => 0xCC, // "int3"
    .aarch64 => 0xD420_0000, // "brk #0"
    else => unreachable,
};

pub const TRAP_INST_MASK: usize = ~@as(usize, std.math.maxInt(trap_inst_width_t));

pub const trap_inst_width_t = switch (builtin.cpu.arch) {
    .x86_64 => u8,
    .aarch64 => u32,
    else => unreachable,
};

pub const Register = switch (builtin.cpu.arch) {
    .x86_64 => enum(u5) {
        rax,
        rdx,
        rcx,
        rbx,
        rsi,
        rdi,
        rbp,
        rsp,
        r8,
        r9,
        r10,
        r11,
        r12,
        r13,
        r14,
        r15,
        rip,
        xmm0,
        xmm1,
        xmm2,
        xmm3,
        xmm4,
        xmm5,
        xmm6,
        xmm7,
        xmm8,
        xmm9,
        xmm10,
        xmm11,
        xmm12,
        xmm13,
        xmm14,
        xmm15,
        st0,
        st1,
        st2,
        st3,
        st4,
        st5,
        st6,
        st7,
        mm0,
        mm1,
        mm2,
        mm3,
        mm4,
        mm5,
        mm6,
        mm7,
        rflags,
        es,
        cs,
        ss,
        ds,
        fs,
        gs,
        fs_base = 58,
        gs_base,
        tr = 62,
        ldtr,
        mxcsr,
        fcw,
        fsw,
        xmm16,
        xmm17,
        xmm18,
        xmm19,
        xmm20,
        xmm21,
        xmm22,
        xmm23,
        xmm24,
        xmm25,
        xmm26,
        xmm27,
        xmm28,
        xmm29,
        xmm30,
        xmm31,
        k0 = 118,
        k1,
        k2,
        k3,
        k4,
        k5,
        k6,
        k7,
    },
    .aarch64 => enum {
        r0,
        r1,
        r2,
        r3,
        r4,
        r5,
        r6,
        r7,
        r8,
        r9,
        r10,
        r11,
        r12,
        r13,
        r14,
        r15,
        r16,
        r17,
        r18,
        r19,
        r20,
        r21,
        r22,
        r23,
        r24,
        r25,
        r26,
        r27,
        r28,
        fp,
        lr,
        sp,
        pc,
    },
    else => unreachable,
};
